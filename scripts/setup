#! /usr/bin/env php
<?php

define('IA_SETUP_SCRIPT', true);
require_once(dirname($argv[0]) . '/utilities.php');

// Add slashes to a string.
function slash_string($string, $start, $end) {
    // Strip existing start/end slash
    $string = trim($string, '/');

    // Add start/end slash
    if ($start) {
        $string = '/' . $string;
    }
    if ($end) {
        $string = $string . '/';
    }

    // Tada.
    return $string;
}

// Checks if the script is running as root.
function running_as_root() {
    return posix_getuid() == 0;
}


// ---
// Real code starts here
// ---

print("Hello, I am the infoarena setup script and I will try to guide ".
      "you through setting up an infoarena developement working copy.\n");

if (!running_as_root()) {
    print("First of all, please run me as root.\n");
    die();
}

print("I'm going to ask you a couple of questions. Just press enter if you ".
      "like the default value. I'm pretty good at guessing ;).\n\n");

// FIXME: Check dependencies? pecl nonsense is no longer mandatory.
// It should be done it setup.sh anyway, since we can't rely on php-cli.

// Initialize config vars.
$config_vars = array();
$config_vars['IA_ROOT_DIR'] = realpath(dirname($argv[0]) . '/../') . '/';
$config_vars['IA_URL_HOST'] = 'http://localhost';
$config_vars['IA_URL_PREFIX'] = '/infoarena2-dev/';
$config_vars['IA_DB_HOST'] = 'localhost';
$config_vars['IA_DB_USER'] = 'root';
$config_vars['IA_DB_PASS'] = '';
$config_vars['IA_DB_NAME'] = 'infoarena2';

// Ask user.
$config_vars['IA_ROOT_DIR'] = read_line('SVN checkout dir?',
                                        $config_vars['IA_ROOT_DIR']);
$config_vars['IA_ROOT_DIR'] = slash_string(
    realpath($config_vars['IA_ROOT_DIR']), true, true);
$config_vars['IA_AVATAR_FOLDER'] =
    $config_vars['IA_ROOT_DIR'] . 'www/static/images/avatar/';
$config_vars['IA_AVATAR_FOLDER'] = read_line('Avatar Folder?',
                                             $config_vars['IA_AVATAR_FOLDER']);
$config_vars['IA_AVATAR_FOLDER'] = slash_string(
    $config_vars['IA_AVATAR_FOLDER'], true, true);
$config_vars['IA_URL_HOST'] = read_line('Host part of url (with http)?',
                                        $config_vars['IA_URL_HOST']);
$config_vars['IA_URL_HOST'] = slash_string($config_vars['IA_URL_HOST'],
                                           false, false);
$config_vars['IA_URL_PREFIX'] = read_line('Prefix part of url?',
                                          $config_vars['IA_URL_PREFIX']);
$config_vars['IA_URL_PREFIX'] = slash_string($config_vars['IA_URL_PREFIX'],
                                             true, true);
if ($config_vars['IA_URL_PREFIX'] == '//') {
    $config_vars['IA_URL_PREFIX'] = '/'; // you'll get surprised without this
}

// Compile needed files
compile_lcs($config_vars['IA_ROOT_DIR']);

// Database configuration here.
while (true) {
    $config_vars['IA_DB_HOST'] = read_line('Database host?',
                                           $config_vars['IA_DB_HOST']);
    $config_vars['IA_DB_USER'] = read_line('Database connection username?',
                                           $config_vars['IA_DB_USER']);
    $config_vars['IA_DB_PASS'] = read_line('Database password?',
                                           $config_vars['IA_DB_PASS']);
    $config_vars['IA_DB_NAME'] = read_line('Database name?',
                                           $config_vars['IA_DB_NAME']);

    $dblink = mysql_connect($config_vars['IA_DB_HOST'],
                            $config_vars['IA_DB_USER'],
                            $config_vars['IA_DB_PASS']);

    if (!$dblink) {
        print("Can't connect to database, something must be wrong.\n");
        if (read_bool("Try again or ignore (CTRL-C to abort)?", true)) {
            continue;
        } else {
            break;
        }
    }

    if (!mysql_select_db($config_vars['IA_DB_NAME'], $dblink)) {
        print("Can't select database.\n");
        if (read_bool("Should I try to create the database?", true)) {
            if (!mysql_query("CREATE DATABASE {$config_vars['IA_DB_NAME']}")) {
                print("Failed creating database, sorry.");
                continue;
            }
            if (!mysql_select_db($config_vars['IA_DB_NAME'], $dblink)) {
                print("Still can't select database.\n");
                continue;
            }
        }
    }
    break;
}

// Do the config monkey.
$ia_root = $config_vars['IA_ROOT_DIR'];
$ia_url = $config_vars['IA_URL_HOST'] . $config_vars['IA_URL_PREFIX'];
generate_config_file($config_vars,
                     $ia_root . 'config.php.sample',
                     $ia_root . 'config.php');
generate_config_file($config_vars,
                     $ia_root . 'www/htaccess.sample',
                     $ia_root . 'www/.htaccess');
generate_config_file($config_vars,
                     $ia_root . 'eval/config.php.sample',
                     $ia_root . 'eval/config.php');
generate_config_file($config_vars,
                     $ia_root . 'apache.conf.sample',
                     $ia_root . 'apache.conf');

// Configure apache
if (read_bool('Should I try to configure apache for you?', true)) {
    $sitename = slash_string($config_vars['IA_URL_PREFIX'], false, false);
    if (!$sitename) {
        $sitename = 'infoarena';
    }

    do {
        $sitename = read_line('Site name? (Only digits, letters and the characters _ and - )', $sitename);
    } while (preg_match('/^[a-z0-9\-_]+$/xi', $sitename) == 0 || strlen($sitename) == 0);

    $dirs = array($ia_root . 'attach',
                  $ia_root . 'cache',
                  $config_vars['IA_AVATAR_FOLDER'],
                  $ia_root . 'www/static/images/tmp');
    foreach ($dirs as $dir) {
        if (!is_dir($dir)) {
            mkdir($dir);
        }
        system('chmod 2750 ' . escapeshellarg($dir));
    }

    $sitename_not_escaped = $sitename;
    $sitename = escapeshellarg($sitename);
    if (php_uname('s') === 'Darwin') {
        // OS X installation
        print("You seem to have an OS X setup.\n");
        system("rm -rf /etc/apache2/other/$sitename.conf");
        system("ln -sf {$ia_root}apache.conf /etc/apache2/other/$sitename.conf");

        $httpd_contents = file_get_contents('/etc/apache2/httpd.conf');
        $httpd_contents = str_replace(
            '#LoadModule php5_module libexec/apache2/libphp5.so',
            'LoadModule php5_module libexec/apache2/libphp5.so',
            $httpd_contents);
        file_put_contents('/etc/apache2/httpd.conf', $httpd_contents);
        system("apachectl -k restart");
        foreach ($dirs as $dir) {
            system('chown _www:' . getmygid() . ' ' . escapeshellarg($dir));
        }
    } else if (is_dir('/etc/apache2/sites-available/') &&
               is_dir('/etc/apache2/sites-enabled/')) {
        // Debian/Ubuntu
        print("You seem to have a debian-ish apache2 setup.\n");
        system("rm -rf /etc/apache2/sites-available/$sitename");
        system("rm -rf /etc/apache2/sites-enabled/$sitename");
        system("ln -sf {$ia_root}apache.conf ".
               "/etc/apache2/sites-available/$sitename");

        // Enable site ad modules, then reload
        system("a2enmod php5");
        system("a2enmod rewrite");
        system("a2ensite $sitename");
        system("/etc/init.d/apache2 reload");
        foreach ($dirs as $dir) {
            system('chown www-data:' . getmygid() . ' ' . escapeshellarg($dir));
        }
    } else if (is_dir('/etc/httpd/conf.d/')) {
        // Fedora/Redhat/others?
        print("You seem to have a redhat-ish apache2 setup.\n");
        system("rm -rf /etc/httpd/infoarena2-dev");
        system("ln -sf {$ia_root}apache.conf /etc/httpd/conf.d/$sitename");
        system("service httpd restart");
        foreach ($dirs as $dir) {
            system('chown apache:' . getmygid() . ' ' . escapeshellarg($dir));
        }
    } else if (is_dir('/etc/httpd/conf/')) {
        // Arch linux
        print("You seem to have an arch-linux apache setup.\n");
        system("rm -rf /etc/httpd/conf/extra/$sitename.conf");
        system("ln -sf {$ia_root}apache.conf /etc/httpd/conf/extra/$sitename.conf");

        $httpd_contents = file_get_contents('/etc/httpd/conf/httpd.conf');
        $site_enable = "\n\nInclude \"conf/extra/$sitename_not_escaped.conf\"";

        // enable site
        if (strpos($httpd_contents, $site_enable) === false) {
            $httpd_contents .= $site_enable;
        }

        if (strpos($httpd_contents, "LoadModule php5_module modules/libphp5.so") === false) {
            if (read_bool("It seems you do not have the php module enabled. "
                . "That is normal for an arch linux distribution. "
                . "Do you want me to enable it (ugly stuff) ?", true)) {
                    $httpd_contents .= "\nLoadModule php5_module modules/libphp5.so";
                    $httpd_contents .= "\nInclude conf/extra/php5_module.conf";
                    system("echo 'application/x-httpd-php       php    php5' >> /etc/httpd/conf/mime.types");
                }
        }

        file_put_contents('/etc/httpd/conf/httpd.conf', $httpd_contents);

        // enable php extensions
        $extensions = array("posix", "mysql", "mysqli", "curl", "zip");
        $php_ini_contents = file_get_contents('/etc/php/php.ini');
        foreach ($extensions as $extension) {
            $php_ini_contents = str_replace(
                ";extension=$extension.so",
                "extension=$extension.so",
                $php_ini_contents);
        }
        file_put_contents('/etc/php/php.ini', $php_ini_contents);

        system("systemctl restart httpd.service");

        foreach ($dirs as $dir) {
            system('chown http:' . getmygid() . ' ' . escapeshellarg($dir));
        }

        print("You might wanna comment the line with open_basedir in "
            . "/etc/php/php.ini if you get warning with \"ini_set....\""
            . " because the script might not have worked. That's less security"
            . ", but hey we're good guys :-).\n");
   } else {
        print("I can not figure out how to setup the webserver on your " .
              "operating system. You will have to do it yourself\n");
        if (!read_bool("Would you like to continue with the rest of " .
                       "the setup script?", true)) {
            die();
        }
    }

    print("You should also run a chmod +x on all directories on the "
        . "way to root (/) starting from the root folder of this ins"
        . "tall.\n");

    print("Done configuring apache\n\n");
}

if (php_uname('s') === 'Darwin') {
    print("Evaluator is not supported on OS X installations.\n\n");
} else {
    print("FIXME: eval won't work, but it doesn't matter.\n");
    print("Done configuring evaluator\n\n");
}

// Run any other scripts
if (read_bool("Should I try to build the avatar cache folder?", true)) {
    print("Building the avatar cache folder\n");
    passthru("{$ia_root}scripts/make-avatar-folder");
    print("Done building the avatar cache folder\n\n");
}
