#! /usr/bin/env php
<?php

require_once(dirname($argv[0]) . "/utilities.php");
require_once(IA_ROOT_DIR . 'common/external_libs/class.phpmailer.php');
require_once(IA_ROOT_DIR."common/db/user.php");
require_once(IA_ROOT_DIR."common/db/textblock.php");
require_once(IA_ROOT_DIR."common/user.php");
require_once(IA_ROOT_DIR."common/rating.php");
require_once(IA_ROOT_DIR."common/email.php");
require_once(IA_ROOT_DIR."common/newsletter.php");
require_once(IA_ROOT_DIR."www/url.php");
db_connect();

// Configuration section.

define("IA_NEWSLETTER_FROM", "newsletter@infoarena.ro");
define("IA_NEWSLETTER_FROM_NAME", "Newsletter Infoarena");
// how many emails to send at once (with no delay)
define("IA_BURST_LENGTH", 25);
// pause (milliseconds i.e. 10^-3) between bursts.
define("IA_BURST_DELAY", 500);
// place where we store newsletter logs
define("IA_NEWSLETTER_LOGDIR", IA_ROOT_DIR."scripts/newsletter-logs/");
// application to use for previewing the HTML newsletter
define("IA_NEWSLETTER_PREVIEW_APP", "elinks");

// Create PHPMailer object from newsletter textblock, and for given recipient.
function phpmail_create($textblock, $recipient) {
    log_assert_valid(user_validate($recipient));
    log_assert_valid(textblock_validate($textblock));
    $phpmail = new PHPMailer();
    phpmail_config($phpmail);
    $phpmail->Subject = newsletter_subject($textblock, $recipient);
    $phpmail->AltBody = newsletter_body_alternate($textblock, $recipient);
    $phpmail->Body = newsletter_body_html($textblock, $recipient);
    $phpmail->AddAddress($recipient['email'], $recipient['full_name']);
    return $phpmail;
}

// Configure a PHPMailer object.
function phpmail_config(&$phpmail) {
    if (IA_SMTP_ENABLED) {
        $phpmail->IsSMTP();
        $phpmail->Host = IA_SMTP_HOST;
        $phpmail->Port = IA_SMTP_PORT;
    } else {
        // Use PHP mail(...) function.
        $phpmail->IsMail();
    }
    $phpmail->From = IA_NEWSLETTER_FROM;
    $phpmail->FromName = IA_NEWSLETTER_FROM_NAME;
    $phpmail->CharSet = "UTF-8";
}

// return array with valid subscriber list identifiers
function list_valid_ids() {
    $valid = array(
        'all', 'admins', 'rated', 'test', 'review'
    );
    return $valid;
}

function list_get($list_id) {
    switch ($list_id) {
        case 'all':
            // all subscribers that agree to receive newsletters
            $query = "SELECT * FROM ia_user WHERE newsletter = 1";
            return db_fetch_all($query);

        case 'admins':
            // all administrators
            $query = "SELECT * FROM ia_user
                      WHERE 'admin' = security_level AND newsletter = 1
                      ORDER BY full_name";
            return db_fetch_all($query);

        case 'rated':
            // all rated users that agree to receive newsletters
            $query = "SELECT * FROM ia_user
                      WHERE 0 < rating_cache AND newsletter = 1
                      ORDER BY rating_cache DESC";
            return db_fetch_all($query);

        case 'review':
            // a small set of users. meant for reviewing
            $usernames = array('wickedman', 'domino', 'silviug', 'Cosmin');
            $query = "SELECT * FROM ia_user
                      WHERE username IN ('".join("', '", $usernames)."')
                      ORDER BY full_name";
            return db_fetch_all($query);

        case 'test':
            // test the newsletter in various email clients
            $usernames = array('gmail_test', 'yahoo_test', 'hotmail_test',
                    'k_test');
            $query = "SELECT * FROM ia_user
                      WHERE username IN ('".join("', '", $usernames)."')
                      ORDER BY full_name";
            return db_fetch_all($query);

        default:
            log_error("Invalid list id!");
    }
}

// Preview email for a given recipient
// When recipient is null, no tags are replaced
function preview_email($textblock, $recipient, $use_external_app = true) {
    log_assert_valid(user_validate($recipient));
    log_assert_valid(textblock_validate($textblock));
    $phpmail = phpmail_create($textblock, $recipient);
    if (function_exists('sys_get_temp_dir')) {
        $temp_dir = sys_get_temp_dir();
    } else {
        $temp_dir = '/tmp';
    }
    $temp_filename = tempnam($temp_dir, 'ia-newsletter-preview-');
    file_put_contents($temp_filename, $phpmail->Body);

    echo "\n\n===  e-mail ========================================\n";
    echo "From   : {$phpmail->From}\n";
    if ($recipient) {
        echo "To     : ".$recipient['email']."\n";
    }
    echo "Subject: {$phpmail->Subject}\n";
    echo "---  alternate text --------------------------------\n";
    echo wordwrap($phpmail->AltBody, IA_EMAIL_WORDRAP)."\n";
    echo "--- /alternate text --------------------------------\n";
    echo "=== /e-mail ========================================\n\n";

    // warn users if word-wrapping is needed

    if (wordwrap($phpmail->AltBody, IA_EMAIL_WORDRAP) != $phpmail->AltBody) {
        log_print("WARNING: Please word-wrap the text to ".IA_EMAIL_WORDRAP
                  ." characters per line!\n");
    }

    // display HTML body in preview app

    if ($use_external_app) {
        system(IA_NEWSLETTER_PREVIEW_APP." ".$temp_filename);
        unlink($temp_filename);
    }
}

// Format recipient to display it nicely on screen / log
function recipient_str($recipient) {
    log_assert_valid(user_validate($recipient));
    return '<'.$recipient['email'].'> ['.$recipient['username']
            .'] '.$recipient['full_name'];
}

// each newsletter has its own log
// put $msg into $page_name's log
function nlog($newsletter_id, $msg) {
    $fd = fopen(IA_NEWSLETTER_LOGDIR.$newsletter_id, "a");
    log_assert($fd);
    fputs($fd, $msg."\n");
    fclose($fd);
}

// Tells whether a newsletter log exists
function nlog_exists($newsletter_id) {
    $fname = IA_NEWSLETTER_LOGDIR.$newsletter_id;
    return file_exists($fname);
}

// Display newsletter log
function nlog_view($newsletter_id) {
    $fname = IA_NEWSLETTER_LOGDIR.$newsletter_id;
    log_assert(file_exists($fname));
    $buffer = file_get_contents($fname);
    echo $buffer;
}

function log_putch($char) {
    log_assert(1 == strlen($char));
    static $lcount = 0;

    $lcount++;
    echo $char;
    if (0 == $lcount % 79) {
        echo "\n";
    }
}

/// entry point
// ---------------------------------------------------------------------

// read page name
if (2 != $argc) {
    log_error("usage: ./send-newsletter wiki-page-name");
}
$page_name = $argv[1];

// validate $page_name
$prefix = 'newsletter/';
if ($prefix != substr($page_name, 0, strlen($prefix))) {
    log_error("Newsletter page names should start with $prefix");
}
$textblock = textblock_get_revision($page_name);
if (!$textblock) {
    log_error("Invalid page name!");
}
$newsletter_id = substr($page_name, strlen($prefix));

// small preview before entering main menu
preview_email($textblock, newsletter_anonymous_user(), false);

// check log
// It is possible that script was interrupted so warn user to resume
if (nlog_exists($newsletter_id)) {
    log_print("WARNING: This newsletter already has a log! It is "
              ."possible that a prior mass mail process failed.\n");
    if (read_bool("Would you like to inspect the log?", true)) {
        nlog_view($newsletter_id);
    }
}

// main menu
while (true) {
    $cmd = read_line("newsletter>");
    $elems = explode(" ", $cmd);
    if (1 < count($elems)) {
        $cmd = $elems[0];
        array_shift($elems);
        $param = join(" ", $elems);
    }
    else {
        $param = null;
    }

    switch ($cmd) {
        case "quit":
            // guess what?
            log_print("Bye!");
            die();
            break;

        case "preview":
            // preview email as it would be received by a user
            if ($param) {
                $user = user_get_by_username($param);
                if (!$user) {
                    log_print("No such user!");
                    break;
                }
            }
            else {
                $user = newsletter_anonymous_user();
            }
            preview_email($textblock, $user);
            break;

        case "count":
            // count subscribers in a given list
            if (!$param) {
                log_print('Forgot to specify subscriber list');
                break;
            }
            if (!in_array($param, list_valid_ids())) {
                log_print("No such list!");
            }
            $list = list_get($param);
            log_print(count($list)." subscribers in this list\n");
            if (!$param) {
                log_print('Forgot to specify subscriber list');
                break;
            }
            if (!in_array($param, list_valid_ids())) {
                log_print("No such list!");
            }
            $list = list_get($param);
            $i = 0;
            foreach ($list as $recipient) {
                if (!is_valid_email($recipient['email'])) {
                    $status = 'INVALID';
                }
                else {
                    $status = 'ok     ';
                }
                log_print($i."\t".$status."\t".recipient_str($recipient));
                $i++;
            }
            log_print("\n".count($list)." subscribers in this list\n");
            break;

        case "list":
            // list subscribers in a given list
            if (!$param) {
                log_print('Forgot to specify subscriber list');
                break;
            }
            if (!in_array($param, list_valid_ids())) {
                log_print("No such list!");
            }
            $list = list_get($param);
            $i = 0;
            foreach ($list as $recipient) {
                if (!is_valid_email($recipient['email'])) {
                    $status = 'INVALID';
                }
                else {
                    $status = 'ok     ';
                }
                log_print($i."\t".$status."\t".recipient_str($recipient));
                $i++;
            }
            log_print("\n".count($list)." subscribers in this list\n");
            break;

        case "log":
            // view newsletter log
            if (nlog_exists($newsletter_id)) {
                nlog_view($newsletter_id);
            }
            else {
                log_print("Newsletter has no log.");
            }
            break;

        case "send":
            // read list
            $list_id = read_line('Subscriber list?');
            if (!in_array($list_id, list_valid_ids())) {
                log_print("No such list!");
                break;
            }
            $list = list_get($list_id);
            log_print("\n".count($list)." subscribers in this list\n");

            // resume sending emails?
            $skip = read_line("Enter next recipient-index to send email to "
                              ."(0 means from the beginning):", 0);
            log_assert(is_numeric($skip) && (0 <= $skip)
                       && ($skip <= count($list)), "Invalid recipient index");
            $skip = (int)$skip;
            if (0 < $skip) {
                $left = count($list) - $skip;
                log_print("Skipping {$skip} recipients. There are {$left} "
                          ."left.");
                log_print("Last skipped recipient: "
                          .recipient_str($list[$skip - 1]));
                log_print("Next recipient is: ".recipient_str($list[$skip]));
            }

            echo "\n\n";

            // confirm
            if (!read_bool("This is the final warning! "
                           ."Should I start sending emails?", false)) {
                log_print("Aborted by user");
                break;
            }

            // start sending letters
            $i = $skip - 1;
            $count_ok = 0;
            $count_error = 0;
            $used_destinations = array();
            foreach ($list as $recipient) {
                // skip some recipients
                if (0 < $skip) {
                    $skip--;
                    continue;
                }

                $i++;
                log_assert_valid(user_validate($recipient));

                // log invalid email addresses
                if (!is_valid_email($recipient['email'])) {
                    nlog($newsletter_id,
                         $i."\tINVALID\t".recipient_str($recipient));
                    log_putch('i');
                    $count_error++;
                    continue;
                }

                // avoid emailing the same destination, even for
                // different accounts
                if (isset($used_destinations[$recipient['email']])) {
                    nlog($newsletter_id,
                         $i."\tDUPLICATE\t".recipient_str($recipient));
                    log_putch('D');
                    $count_error++;
                    continue;
                } else {
                    $used_destinations[$recipient['email']] = true;
                }

                // send email
                $phpmail = phpmail_create($textblock, $recipient);
                $success = $phpmail->Send();

                if ($success) {
                    log_putch('.');
                    nlog($newsletter_id, $i."\tok\t".recipient_str($recipient));
                    $count_ok++;
                }
                else {
                    log_putch('e');
                    nlog($newsletter_id, $i."\tERROR\t".
                            recipient_str($recipient)."\t".
                            $phpmail->ErrorInfo);
                    $count_error++;
                }

                // take a break from time to time
                if (0 == ($i + 1) % IA_BURST_LENGTH) {
                    usleep(IA_BURST_DELAY * 1000);
                }
            }

            log_putch("\n");
            log_print("\nTask completed!");
            log_print("{$count_ok} ok; {$count_error} errors; ".count($list)
                      ." total (total includes skipped)");
            break;
        case "single":
            if (!$param) {
                log_print('Forgot to specify the user');
                break;
            }

            $recipient = user_get_by_username($param);
            if (!$recipient) {
                log_print("No such username");
                break;
            }
            $phpmail = phpmail_create($textblock, $recipient);
            $success = $phpmail -> Send();
            if ($success) {
                log_print("Success!");
            } else {
                log_print("Error");
            }
            break;

        default:
            log_print("Invalid command");
            echo <<<EOS

Valid commands:
quit
preview [<username>]
list <list-id>
count <list-id>
send
log
single [username]     ** Careful, it's experimental
EOS;
            // valid subscriber lists
            echo "\nValid subscriber lists: ".join(', ', list_valid_ids())
                 ."\n\n\n";

    }
}

?>
