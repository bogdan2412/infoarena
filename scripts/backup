#! /usr/bin/env php
<?php

require_once(dirname($argv[0]) . '/utilities.php');

define('IA_BACKUP_DIR', '/home/backup/ia-backup');
define('IA_LIVE_DIR', '/home/infoarena');
define('IA_BACKUP_USER', 'backup');
// Passphrase file to use with GPG, leave blank to disable encryption.
define('IA_BACKUP_DB_ENCRYPT_KEY', '/root/.backup-passphrase');

$BACKUP_PATHS_WEEKLY = array(
    'conf/conf-' => array(IA_LIVE_DIR.'/trac.htpasswd',
                          IA_LIVE_DIR.'/nginx.conf',
                          IA_LIVE_DIR.'/apache.conf',
                          IA_ROOT_DIR.'/config.php'),
);

function backup_init_dirs() {
    log_assert(is_dir(IA_BACKUP_DIR), 'Invalid directory: '.IA_BACKUP_DIR);
    log_assert(is_dir(IA_LIVE_DIR), 'Invalid directory: '.IA_LIVE_DIR);
    $dirs = array('db', 'conf', 'hackers',
                  'hackers/svn', 'hackers/trac', 'hackers/reviewboard');
    foreach ($dirs as $dir) {
        $path = IA_BACKUP_DIR . '/' . $dir;
        if (!is_dir($path)) {
            mkdir($path, 0755, true);
        }
    }
    system(sprintf('chown -R %s:%s %s/*', IA_BACKUP_USER, IA_BACKUP_USER,
           IA_BACKUP_DIR));
}

function backup_db() {
    $temp_file = tempnam(temp_dir(), 'infoarena.sql.gz');
    $backup_file = sprintf("%s/db/db-%s.sql.gz", IA_BACKUP_DIR,
        backup_timestamp());
    log_print("Backing up database to {$temp_file}");
    system(sprintf("%s/scripts/db-backup %s", IA_ROOT_DIR, $temp_file));
    if (IA_BACKUP_DB_ENCRYPT_KEY) {
        log_assert(file_exists(IA_BACKUP_DB_ENCRYPT_KEY));
        $backup_file .= ".gpg";
        log_print("Encrypting database dump to {$backup_file}");
        system(sprintf("gpg -c --no-use-agent --batch --no-tty --passphrase-file='%s' "
                ."< %s > %s", IA_BACKUP_DB_ENCRYPT_KEY, $temp_file,
                $backup_file));
        unlink($temp_file);
    } else {
        rename($temp_file, $backup_file);
    }
    chown($backup_file, IA_BACKUP_USER);
    chgrp($backup_file, IA_BACKUP_USER);
}

function backup_path($target, $paths) {
    $target_file = sprintf("%s/%s%s.tar.gz", IA_BACKUP_DIR, $target,
        backup_timestamp());
    $quoted_paths = "'".join("' '", $paths)."'";
    log_print(sprintf("Creating archive %s from (%s)", $target_file,
        $quoted_paths));
    system(sprintf("tar -czf %s %s", $target_file, $quoted_paths));
    chown($target_file, IA_BACKUP_USER);
    chgrp($target_file, IA_BACKUP_USER);
}

function backup_daily() {
    log_print("Running daily backup");
    backup_db();
}

function backup_weekly() {
    log_print("Running weekly backup");
    global $BACKUP_PATHS_WEEKLY;
    foreach ($BACKUP_PATHS_WEEKLY as $target => $paths) {
        backup_path($target, $paths);
    }
}

function backup_clean() {
    log_print("Deleting old backups");
    $highest_mtime = 0;
    $file = null;
    foreach (scandir(IA_BACKUP_DIR.'/db/') as $db) {
        if ($db[0] == '.') {
            continue;
        }
        $mtime = filemtime(IA_BACKUP_DIR.'/db/'.$db);
        if ($mtime > $highest_mtime) {
            $highest_mtime = $mtime;
            $file = $db;
        }
    }

    foreach (scandir(IA_BACKUP_DIR.'/db/') as $db) {
        if ($db[0] == '.')
            continue;
        if ($db != $file)
            unlink(IA_BACKUP_DIR.'/db/'.$db);
    }
}

function main() {
    global $argv;
    backup_init_dirs();
    if (count($argv) != 2 ||
        !in_array($argv[1], array('daily', 'weekly', 'clean'))) {
        log_error("Expecting 1 argument: 'daily', 'weekly', or 'clean'.");
    }
    if ('daily' == $argv[1]) {
        backup_daily();
    } elseif ('weekly' == $argv[1]) {
        backup_weekly();
    } elseif ('clean' == $argv[1]) {
        backup_clean();
    } else {
        log_error("Invalid args");
    }
}

main();

?>
